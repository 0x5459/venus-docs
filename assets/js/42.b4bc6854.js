(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{409:function(e,t,a){"use strict";a.r(t);var n=a(17),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"task-status-flow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#task-status-flow"}},[e._v("#")]),e._v(" Task status flow")]),e._v(" "),a("p",[e._v("Understanding the status flow of tasks will help users understand the status of "),a("code",[e._v("venus-worker")]),e._v(" and perform targeted recovery of suspended sector tasks.")]),e._v(" "),a("p",[e._v("The status flow of the task is related to the type of the task, that is, the "),a("code",[e._v("plan")]),e._v(" option in "),a("code",[e._v("sealing_thread")]),e._v("] (./03. venus-worker's configuration analysis.md#Basic configuration example-3), so we will describe it separately .")]),e._v(" "),a("p",[e._v("In the description below, occurrences prefixed with "),a("code",[e._v("State::")]),e._v(" are states, and occurrences prefixed with "),a("code",[e._v("Event::")]),e._v(" are events or procedures. similar")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("State::A => {\nEvent::B => State::C,\nEvent::D => State::E,\n}\n")])])]),a("p",[e._v("express:")]),e._v(" "),a("p",[e._v("When the task is in "),a("code",[e._v("A")]),e._v(" state")]),e._v(" "),a("ol",[a("li",[e._v("If "),a("code",[e._v("B")]),e._v(" event occurs, go to "),a("code",[e._v("C")]),e._v(" state")]),e._v(" "),a("li",[e._v("If "),a("code",[e._v("D")]),e._v(" event occurs, go to "),a("code",[e._v("E")]),e._v(" state")])]),e._v(" "),a("p",[e._v("Also need to explain:")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("For each state, transitions to one or more other states may occur, that is, one or more lines may appear in "),a("code",[e._v("{}")])])]),e._v(" "),a("li",[a("p",[e._v("In addition to the specific states listed, there are also some special states, such as:")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("State::Abort")]),e._v(", indicating that the sector did not complete normally")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("In any logical judgment, an exception belonging to the "),a("code",[e._v("abort")]),e._v(" level will cause the task to change to the "),a("code",[e._v("Abort")]),e._v(" state, the task will be terminated, and the current "),a("code",[e._v("sealing_thread")]),e._v(" will move to the next task")])]),e._v(" "),a("li",[a("p",[e._v("When the user sends the resume command to the suspended task, if the "),a("code",[e._v("Abort")]),e._v(" state is attached, the above effect will also be achieved")]),e._v(" "),a("p",[e._v("Therefore, users can use this mechanism to handle exceptions that are difficult to recover, but have not yet been defined as "),a("code",[e._v("abort")]),e._v(" level")])])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("State::Finished")]),e._v(" indicates that the sector completed normally")])])])])]),e._v(" "),a("h2",{attrs:{id:"the-state-flow-of-the-sealer-task"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-state-flow-of-the-sealer-task"}},[e._v("#")]),e._v(" The state flow of the sealer task")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Empty state, that is, the sector has not been allocated yet\nState::Empty => {\n// apply for a new sector\nEvent::Allocate(_) => State::Allocated,\n},\n\n// new sector is allocated\nState::Allocated => {\n// request an order\nEvent::AcquireDeals(_) => State::DealsAcquired,\n},\n\n// order has been applied\nState::DealsAcquired => {\n// fill piece data\nEvent::AddPiece(_) => State::PieceAdded,\n},\n\n// data is filled\nState::PieceAdded => {\n// construct TreeD\nEvent::BuildTreeD => State::TreeDBuilt,\n},\n\n// TreeD has been generated\nState::TreeDBuilt => {\n// Request on-chain random number required by pc1\nEvent::AssignTicket(_) => State::TicketAssigned,\n},\n\n// The on-chain random number required by pc1 has been obtained\nState::TicketAssigned => {\n// execute pc1\nEvent::PC1(_, _) => State::PC1Done,\n},\n\n// pc1 is done\nState::PC1Done => {\n// execute pc2\nEvent::PC2(_) => State::PC2Done,\n},\n\n// pc2 is done\nState::PC2Done => {\n// Submit PreCommit on-chain information\nEvent::SubmitPC => State::PCSubmitted,\n},\n\n// PreCommit on-chain information has been submitted\nState::PCSubmitted => {\n// Failed to upload, need to resubmit\nEvent::ReSubmitPC => State::PC2Done,\n// Successfully uploaded\nEvent::CheckPC => State::PCLanded,\n},\n\n// PreCommit information has been uploaded\nState::PCLanded => {\n//Perform sector file persistence\nEvent::Persist(_) => State::Persisted,\n},\n\n// sector file is persisted\nState::Persisted => {\n// Check by persistent file\nEvent::SubmitPersistance => State::PersistanceSubmitted,\n},\n\n// Persistence file is confirmed\nState::PersistanceSubmitted => {\n// Request on-chain random number required for c1\nEvent::AssignSeed(_) => State::SeedAssigned,\n},\n\n// The on-chain random number required by c1 has been obtained\nState::SeedAssigned => {\n// execute c1\nEvent::C1(_) => State::C1Done,\n},\n\n// c1 is done\nState::C1Done => {\n// execute c2\nEvent::C2(_) => State::C2Done,\n},\n\n// c2 is done\nState::C2Done => {\n// Submit CommitProof information\nEvent::SubmitProof => State::ProofSubmitted,\n},\n\n// CommitProof information has been submitted\nState::ProofSubmitted => {\n// Failed to upload, need to resubmit\nEvent::ReSubmitProof => State::C2Done,\n// Successful on-chain or skip on-chain check\nEvent::Finish => State::Finished,\n},\n")])])]),a("h2",{attrs:{id:"upgrade-snapup-task-status-flow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#upgrade-snapup-task-status-flow"}},[e._v("#")]),e._v(" Upgrade (snapup) task status flow")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Empty state, that is, the sector has not been allocated yet\nState::Empty => {\n// Allocate sectors and orders for upgrade\nEvent::AllocatedSnapUpSector(_, _, _) => State::Allocated,\n},\n\n// Upgrade sectors and orders are allocated\nState::Allocated => {\n// fill piece data\nEvent::AddPiece(_) => State::PieceAdded,\n},\n\n// data is filled\nState::PieceAdded => {\n// construct TreeD\nEvent::BuildTreeD => State::TreeDBuilt,\n},\n\n// TreeD has been generated\nState::TreeDBuilt => {\n// perform Snap encoding\nEvent::SnapEncode(_) => State::SnapEncoded,\n},\n\n// Snap encoding is done\nState::SnapEncoded => {\n// Execute Snap proof\nEvent::SnapProve(_) => State::SnapProved,\n},\n\n// Snap proof has been generated\nState::SnapProved => {\n//Perform sector file persistence\nEvent::Persist(_) => State::Persisted,\n},\n\n// sector file is persisted\nState::Persisted => {\n// file fails check\nEvent::RePersist => State::SnapProved,\n// file passed the check\nEvent::Finish => State::Finished,\n},\n")])])]),a("h2",{attrs:{id:"example-of-use-in-combination-with-worker-management-tools"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-of-use-in-combination-with-worker-management-tools"}},[e._v("#")]),e._v(" Example of use in combination with worker management tools")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("For a sector encapsulation task that has been suspended due to an error and cannot be resumed, such as the ticket has expired, you can pass the")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("venus-worker worker -c "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("config "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("file")]),e._v(" path"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" resume --state Abort --index "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("index"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),a("p",[e._v("or")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("venus-sector-manager util worker resume "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("worker instance name or address"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("thread index"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" Abort\n")])])]),a("p",[e._v("Terminate the current task.")])]),e._v(" "),a("li",[a("p",[e._v("For a sector encapsulation task that has been suspended with an error, but it is considered that it can be retried from a previous stage, also if the ticket has expired, you can pass the")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("venus-worker worker -c "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("config "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("file")]),e._v(" path"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" resume --state TreeDBuilt --index "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("index"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),a("p",[e._v("or")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("venus-sector-manager util worker resume "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("worker instance name or address"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("thread index"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" TreeDBuilt\n")])])]),a("p",[e._v("Let it fall back to the previous state to try.")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);